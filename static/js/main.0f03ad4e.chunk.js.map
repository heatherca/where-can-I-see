{"version":3,"sources":["Whichcity.js","Results.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["WhichCity","props","amsterdam","boston","Results","countme","length","shuffled","className","map","art","Form","handleUinput","event","setState","userInput","target","value","state","action","onSubmit","e","handleSubmit","htmlFor","type","id","this","onChange","placeholder","Component","App","searchthis","preventDefault","axios","url","method","responseType","params","apikey","hasimage","sort","person","title","q","then","result","bostonlis","data","records","bart","key","src","primaryimageurl","alt","tabIndex","people","name","handleCheck","bostonli","imgonly","s","response","amsterdamlis","artObjects","aart","webImage","principalOrFirstMaker","amsterdamli","shuffleli","shuffleArray","array","i","j","Math","floor","random","temp","city","citylikecount","checked","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f03ad4e.chunk.js","sourcesContent":["import React from 'react';\n\n// function that displays which city has the most hearts \nfunction WhichCity(props) {\n  if (props.amsterdam > props.boston) {\n    return (\n      <span> Amsterdam</span>\n    )\n  } else if (props.boston > props.amsterdam) {\n    return (\n      <span> Boston</span>\n    )\n  } else {\n    return (\n      <span> Boston and Amsterdam</span>\n    )\n  }\n}\n\nexport default WhichCity","import React from 'react';\n\n// function that puts shuffled lis onto page in results section \nfunction Results(props) {\n  // if nothing is entered in the search or the search returns no results asks user to search again. \n  if (props.countme.length === 0 ||  props.shuffled.length === 0) {\n    return (\n      <p className=\"tryagain\">Did you enter anything? Maybe try a new search.</p>\n    )\n  } else {\n    return (\n      <ul>\n        {\n          props.shuffled.map((art) => {\n            return (\n              art\n            )\n          })\n        }\n\n      </ul>\n    )\n  }\n}\n\n\n\nexport default Results","import React, { Component } from 'react'\n\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userInput: \"\"\n    }\n  }\n   // takes text input and passes it to state also clears city counts once user starts typing something new \n  handleUinput = (event) => {\n    this.setState({\n      userInput: event.target.value,\n      amsterdam: 0,\n      boston: 0\n    })\n  }\n\n  render() {\n      return (\n        <form action=\"\" onSubmit={(e) => {\n          this.props.handleSubmit(e, this.state.userInput)\n          this.setState({\n            userInput: \"\",\n          })\n        }\n        }>\n          <label htmlFor=\"searchArt\" className=\"sr-only\">Input query here</label>\n          <input type=\"text\" id=\"searchArt\" value={this.state.userInput} onChange={this.handleUinput} placeholder=\"eg: lion, france, sun\"></input>\n          <button type=\"submit\">Take a Look</button>\n        </form>\n      )\n    }\n  }\n\n\n\nexport default Form;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport WhichCity from './Whichcity.js';\nimport Results from './Results.js';\nimport Form from './Form.js';\nimport './App.css';\n\n\nclass App extends Component {\n// The state stuff \n  constructor() {\n    super();\n    this.state = {\n      userInput:\"\",\n      amsterdam: 0,\n      boston: 0,\n      bostonli:[],\n      amsterdamli:[],\n      shuffleli:[]\n    }\n  }\n    // The things that happen when a user clicks submit\n    handleSubmit = (event, searchthis) => {\n    event.preventDefault()\n      // The API call for boston\n      axios({\n        url: `https://api.harvardartmuseums.org/object`,\n        method: `GET`,\n        responseType: `json`,\n        params: {\n          apikey: `ac6514d0-8a6f-11ea-a066-95faa1e6fe57`,\n          hasimage: 1,\n          sort: \"random\",\n          person: \"any\",\n          title: searchthis,\n          q: \"imagepermissionlevel:0\",\n          \n        }\n      }).then((result) => {\n      // Data (array of objects) from boston call are mapped into lis and then added to a new array\n       const boston = result.data.records;\n       const bostonlis = boston.map((bart) => {\n          return (\n            <li key={bart.id} className=\"boston\">\n              <div className=\"pic\">\n                <img src={bart.primaryimageurl} alt={bart.title} />\n              </div>\n              <div className=\"picInfo\" tabIndex=\"0\">\n                <h2><span>{bart.title}</span></h2>\n                <p><span>{bart.people[0].name}</span></p>\n                <label htmlFor={bart.id} className=\"sr-only\">Check to like art</label>\n                <input type=\"checkbox\" id={bart.id} className=\"boston\" onChange={this.handleCheck} ></input>\n              </div>\n            </li>\n          )\n        })\n        this.setState({\n          bostonli: bostonlis,\n          userInput: searchthis\n        })\n\n      })\n      // The api call for amsterdam \n      axios({\n        url: `https://www.rijksmuseum.nl/api/en/collection`,\n        method: `GET`,\n        responseType: `json`,\n        params: {\n          key: `dF0gsdz1`,\n          imgonly: true,\n          s: \"relevance\",\n          q: \"title:\" + searchthis,\n        }\n        \n      }).then((response) => {\n        // Data (array of objects) from amsterdam call are mapped into lis and then added to a new array\n        const amsterdam = response.data.artObjects;\n        const amsterdamlis = amsterdam.map((aart) => {\n          return (\n            <li key={aart.id} className=\"amsterdam\">\n              <div className=\"pic\">\n                <img src={aart.webImage.url} alt={aart.title} />\n              </div>\n              <div className=\"picInfo\" tabIndex=\"0\">\n                <h2><span>{aart.title}</span></h2>\n                <p><span>{aart.principalOrFirstMaker}</span></p>\n                <label htmlFor={aart.id} className=\"sr-only\">Check to like art</label>\n                <input type=\"checkbox\" id={aart.id} className=\"amsterdam\" onChange={this.handleCheck} tabIndex=\"0\"></input>\n              </div>\n            </li>\n          )\n        })\n        this.setState({\n          amsterdamli: amsterdamlis\n        }, ()=>{\n          // amsterdam li array and boston li array are combined into one array and new array that shuffles the array is made\n          const shuffleli= this.shuffleArray([...this.state.amsterdamli, ...this.state.bostonli])\n          this.setState({shuffleli})\n        })\n      })\n    // clears city counts\n    this.setState({\n      amsterdam: 0,\n      boston: 0\n    })   \n  }\n\n  // function used to produce shuffled array of lis\n  shuffleArray = (array) => {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n// function used to detect changes in checkboxes and add/remove point from city count in state\nhandleCheck = (event) =>{\n  const city = event.target.className;\n  let citylikecount = this.state[city];\n\n  if(event.target.checked){\n    citylikecount++;\n  }else{\n    citylikecount--;  \n  }\n  this.setState({\n    [city]:citylikecount\n  })\n}\n\n// render \n  render() {\n    return (\n      <div className=\"App\">\n        {/* header  */}\n        <header>\n          <div className=\"wrapper\">\n            <h1 id=\"#top\">Where can I see...?</h1>\n            <p>Input a query and browse through the results. Hover or tap over each piece to find out more and heart which items you are drawn to. At the end see if Amsterdam or Boston is the city for you. </p>\n          </div>\n        </header>\n        <main>\n          {/* search section  */}\n          <section className=\"search\">\n            <div className=\"wrapper\">\n              <Form handleSubmit={this.handleSubmit} />\n            </div>\n          </section>\n          {/* results section  */}\n          <section className=\"results\">\n            <div className=\"wrapper\">\n              <Results shuffled={this.state.shuffleli} countme={this.state.userInput}/>\n            </div>\n          </section>\n          {/* where section  */}\n          <section className=\"where\">\n            <div className=\"wrapper\">\n              <p> You should visit: \n              <WhichCity amsterdam={this.state.amsterdam} boston={this.state.boston}/>\n              </p>\n            </div>\n            <div className=\"pics\">\n              <div className=\"city cA\">\n                <div>\n                  <a href=\"https://www.rijksmuseum.nl/en\">Rijksmuseum</a>\n                <p>{this.state.amsterdam}</p>\n                </div>\n              </div>\n              <div className=\"city cB\">\n                <div>\n                  <a href=\"https://www.harvardartmuseums.org/\">Harvard Art Museums</a>\n                  <p>{this.state.boston}</p>\n                </div>\n              </div>\n            </div>\n            {/* search again section  */}\n            <div className=\"searchAgain\">\n              <div className=\"wrapper\">\n                <a href=\"#top\">Search Again</a>\n              </div>\n            </div>\n          </section>\n        </main>\n        {/* footer  */}\n        <footer>\n          <div className=\"wrapper\">\n            <p>Made By: <a href=\"http://www.heatherandreadis.com/\">Heather Andreadis</a> with data from <a href=\"https://github.com/harvardartmuseums/api-docs\">Harvard Art Museums API</a> and <a href=\"https://data.rijksmuseum.nl/object-metadata/api/\">RijksData API</a></p>\n          <p></p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}